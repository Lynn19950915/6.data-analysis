
Lecture 06　流程與函式

--------------------------------------------------------------------------------

6-1　流程控制

> if(x>10){print("x>10");}else{print("x<=10");}
> if(x>10) print("x>10")  else print("x<=10")　#分號、大括號可省；小括號不可省
> test=ifelse(x>3, "x>3", "x<=3")

> if(x>10){print("第一類");}else if(x>5){print("第二類");}else{print("第三類");}
> if(x>10) print("第一類")  else if(x>5) print("第二類")  else print("第三類")


> sum=0
> for(i in 1:10){sum=sum+i;}
> sum
> j=1
> while(j<=10){j=j+1; sum=sum+j;}
> sum

--------------------------------------------------------------------------------

[範例]請運用for迴圈寫出九九乘法表

> for(i in 1:9){for(j in 1:9){print(paste(i, "x", j, "=", i*j))}}　#類似concat(python)相黏功能

> paste("A", "B", "C", "D", sep="-")　#預設串接符為空白，串接長度=1
> paste(c("A", "B'), c("C", "D"))　#對位串接，串接長度=2
[1] "A C" "B D"
> paste(c("A", "B"), c("C", "D"), collapse="+")　#加入相黏符，串接長度=1


--------------------------------------------------------------------------------

6-2　迴圈函式

> f=function(a, x=5){a*x}　#建立一預設輸出五倍的腳本，類似python lambda函式
> f(10)

--------------------------------------------------------------------------------

[範例]請寫出一函式能讀取檔案match.txt，並將檔案中之對戰成績轉換為一矩陣

setwd(--工作路徑--)
> match_func=function(filename, header, sep){　#宣告函式所需變數

> A=read.table(filename, header=header, sep=sep)　#同read.table格式
> B=matrix(-1, nrow=5, ncol=5)　#nrow=length(levels(A[, 1]), ncol=length(levels(A[, 2])

> rownames(B)=c("A", "B", "C", "D", "E")　#rownames=levels(A[, 1])
> colnames(B)=c("A", "B", "C", "D", "E")　#colnames=levels(A[, 2])
> for(i in 1:nrow(A)){
　B[A[i, "V1"], A[i, "V2"]]=A[i, "V3"]}}　#B[A[i, 1], A[i, 2]]=A[i, 3]

> match_func(filename="match.txt", header=F, sep="|")

--------------------------------------------------------------------------------

1.lapply&sapply

> V=c(10, 20, 30)　#向量: 視為三個元素
> lapply(V, max)　#class(lapply): "list"
> sapply(V, max)
> M=matrix(1:4, byrow=T, nrow=2)　#陣列: 視為四個元素
> lapply(M, mean)
> sapply(M, mean)　#預設縱向輸出
[1] 1 3 2 4

> D=data.frame(V, V)　#data frame: 由向量組成，視為兩個元素(雙欄相同，次欄會顯示V.1)
> lapply(D, function(i) i%%7)　#加入 lazy function: 仍分兩筆輸出，但個別作用
$V　[1] 3 6 2
$V.1[1] 3 6 2
> sapply(D, max)　#class(sapply): "numeric"
     V V.1
[1,] 3   3
[2,] 6   6
[3,] 2   2
> L=list(c(10, 20), c(30, 40))
> lapply(L, sum)
[[1]][1] 30
[[2]][1] 70
> sapply(L, sum)


2.apply&tapply

> M=matrix(1:4, byrow=T, nrow=2)
> apply(M, 1, mean)　#1: 橫向(row)+取平均
[1] 1.5 3.5
> apply(M, 2, function(i) i+2)
> apply(M, 2, function(i) sum(i))　#2: 縱向(col)+lazy function(等同apply(M, 2, sum))
[1] 4 6

> score=c(92, 77, 83, 80, 98)
> group=c("A", "B", "B", "C", "A")
> tapply(score, group, mean)　#以group為分組參數，定義元素彙總方式
 A  B  C 
95 80 80 
